// Code generated by sqlc. DO NOT EDIT.
// source: group_book.sql

package db

import (
	"context"
	"database/sql"
)

const bookExistsInGroup = `-- name: BookExistsInGroup :one
SELECT COUNT(*) FROM group_books WHERE book_id = $1
`

func (q *Queries) BookExistsInGroup(ctx context.Context, bookID sql.NullInt32) (int64, error) {
	row := q.queryRow(ctx, q.bookExistsInGroupStmt, bookExistsInGroup, bookID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createGroupBook = `-- name: CreateGroupBook :one
INSERT INTO group_books (
  group_id,
  book_id,
  completion,
  last_modified
) VALUES (
  $1, $2, $3, $4
) RETURNING id, group_id, book_id, completion, last_modified
`

type CreateGroupBookParams struct {
	GroupID      sql.NullInt32 `json:"group_id"`
	BookID       sql.NullInt32 `json:"book_id"`
	Completion   float64       `json:"completion"`
	LastModified sql.NullTime  `json:"last_modified"`
}

func (q *Queries) CreateGroupBook(ctx context.Context, arg CreateGroupBookParams) (GroupBook, error) {
	row := q.queryRow(ctx, q.createGroupBookStmt, createGroupBook,
		arg.GroupID,
		arg.BookID,
		arg.Completion,
		arg.LastModified,
	)
	var i GroupBook
	err := row.Scan(
		&i.ID,
		&i.GroupID,
		&i.BookID,
		&i.Completion,
		&i.LastModified,
	)
	return i, err
}

const deleteGroupBook = `-- name: DeleteGroupBook :exec
DELETE FROM group_books
WHERE id = $1
`

func (q *Queries) DeleteGroupBook(ctx context.Context, id int32) error {
	_, err := q.exec(ctx, q.deleteGroupBookStmt, deleteGroupBook, id)
	return err
}

const getGroupBook = `-- name: GetGroupBook :one
SELECT id, group_id, book_id, completion, last_modified FROM group_books
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetGroupBook(ctx context.Context, id int32) (GroupBook, error) {
	row := q.queryRow(ctx, q.getGroupBookStmt, getGroupBook, id)
	var i GroupBook
	err := row.Scan(
		&i.ID,
		&i.GroupID,
		&i.BookID,
		&i.Completion,
		&i.LastModified,
	)
	return i, err
}

const getGroupBooksByBook = `-- name: GetGroupBooksByBook :many
SELECT id, group_id, book_id, completion, last_modified FROM group_books
WHERE book_id = $1
`

func (q *Queries) GetGroupBooksByBook(ctx context.Context, bookID sql.NullInt32) ([]GroupBook, error) {
	rows, err := q.query(ctx, q.getGroupBooksByBookStmt, getGroupBooksByBook, bookID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GroupBook{}
	for rows.Next() {
		var i GroupBook
		if err := rows.Scan(
			&i.ID,
			&i.GroupID,
			&i.BookID,
			&i.Completion,
			&i.LastModified,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getGroupBooksByGroup = `-- name: GetGroupBooksByGroup :many
SELECT id, group_id, book_id, completion, last_modified FROM group_books
WHERE group_id = $1
`

func (q *Queries) GetGroupBooksByGroup(ctx context.Context, groupID sql.NullInt32) ([]GroupBook, error) {
	rows, err := q.query(ctx, q.getGroupBooksByGroupStmt, getGroupBooksByGroup, groupID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GroupBook{}
	for rows.Next() {
		var i GroupBook
		if err := rows.Scan(
			&i.ID,
			&i.GroupID,
			&i.BookID,
			&i.Completion,
			&i.LastModified,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateGroupBook = `-- name: UpdateGroupBook :one
UPDATE group_books
SET
  group_id = $2,
  book_id = $3,
  completion = $4,
  last_modified = $5
WHERE id = $1
RETURNING id, group_id, book_id, completion, last_modified
`

type UpdateGroupBookParams struct {
	ID           int32         `json:"id"`
	GroupID      sql.NullInt32 `json:"group_id"`
	BookID       sql.NullInt32 `json:"book_id"`
	Completion   float64       `json:"completion"`
	LastModified sql.NullTime  `json:"last_modified"`
}

func (q *Queries) UpdateGroupBook(ctx context.Context, arg UpdateGroupBookParams) (GroupBook, error) {
	row := q.queryRow(ctx, q.updateGroupBookStmt, updateGroupBook,
		arg.ID,
		arg.GroupID,
		arg.BookID,
		arg.Completion,
		arg.LastModified,
	)
	var i GroupBook
	err := row.Scan(
		&i.ID,
		&i.GroupID,
		&i.BookID,
		&i.Completion,
		&i.LastModified,
	)
	return i, err
}
