// Code generated by sqlc. DO NOT EDIT.
// source: event_attendee.sql

package db

import (
	"context"
	"database/sql"
)

const createEventAttendee = `-- name: CreateEventAttendee :one
INSERT INTO event_attendees (
  event_id,
  user_id
) VALUES (
  $1, $2
) RETURNING id, event_id, user_id
`

type CreateEventAttendeeParams struct {
	EventID sql.NullInt32 `json:"event_id"`
	UserID  sql.NullInt32 `json:"user_id"`
}

func (q *Queries) CreateEventAttendee(ctx context.Context, arg CreateEventAttendeeParams) (EventAttendee, error) {
	row := q.queryRow(ctx, q.createEventAttendeeStmt, createEventAttendee, arg.EventID, arg.UserID)
	var i EventAttendee
	err := row.Scan(&i.ID, &i.EventID, &i.UserID)
	return i, err
}

const deleteEventAttendee = `-- name: DeleteEventAttendee :exec
DELETE FROM event_attendees
WHERE id = $1
`

func (q *Queries) DeleteEventAttendee(ctx context.Context, id int32) error {
	_, err := q.exec(ctx, q.deleteEventAttendeeStmt, deleteEventAttendee, id)
	return err
}

const getEventAttendee = `-- name: GetEventAttendee :one
SELECT id, event_id, user_id FROM event_attendees
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetEventAttendee(ctx context.Context, id int32) (EventAttendee, error) {
	row := q.queryRow(ctx, q.getEventAttendeeStmt, getEventAttendee, id)
	var i EventAttendee
	err := row.Scan(&i.ID, &i.EventID, &i.UserID)
	return i, err
}

const getEventAttendeesByEvent = `-- name: GetEventAttendeesByEvent :many
SELECT id, event_id, user_id FROM event_attendees
WHERE event_id = $1
`

func (q *Queries) GetEventAttendeesByEvent(ctx context.Context, eventID sql.NullInt32) ([]EventAttendee, error) {
	rows, err := q.query(ctx, q.getEventAttendeesByEventStmt, getEventAttendeesByEvent, eventID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []EventAttendee{}
	for rows.Next() {
		var i EventAttendee
		if err := rows.Scan(&i.ID, &i.EventID, &i.UserID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getEventAttendeesByUser = `-- name: GetEventAttendeesByUser :many
SELECT id, event_id, user_id FROM event_attendees
WHERE user_id = $1
`

func (q *Queries) GetEventAttendeesByUser(ctx context.Context, userID sql.NullInt32) ([]EventAttendee, error) {
	rows, err := q.query(ctx, q.getEventAttendeesByUserStmt, getEventAttendeesByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []EventAttendee{}
	for rows.Next() {
		var i EventAttendee
		if err := rows.Scan(&i.ID, &i.EventID, &i.UserID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateEventAttendee = `-- name: UpdateEventAttendee :one
UPDATE event_attendees
SET
  event_id = $2,
  user_id = $3
WHERE id = $1
RETURNING id, event_id, user_id
`

type UpdateEventAttendeeParams struct {
	ID      int32         `json:"id"`
	EventID sql.NullInt32 `json:"event_id"`
	UserID  sql.NullInt32 `json:"user_id"`
}

func (q *Queries) UpdateEventAttendee(ctx context.Context, arg UpdateEventAttendeeParams) (EventAttendee, error) {
	row := q.queryRow(ctx, q.updateEventAttendeeStmt, updateEventAttendee, arg.ID, arg.EventID, arg.UserID)
	var i EventAttendee
	err := row.Scan(&i.ID, &i.EventID, &i.UserID)
	return i, err
}
