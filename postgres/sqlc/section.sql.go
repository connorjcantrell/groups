// Code generated by sqlc. DO NOT EDIT.
// source: section.sql

package db

import (
	"context"
	"database/sql"
)

const createSection = `-- name: CreateSection :one
INSERT INTO sections (
  chapter_id,
  title,
  number
) VALUES (
  $1, $2, $3
) RETURNING id, chapter_id, title, number
`

type CreateSectionParams struct {
	ChapterID sql.NullInt32  `json:"chapter_id"`
	Title     sql.NullString `json:"title"`
	Number    sql.NullInt32  `json:"number"`
}

func (q *Queries) CreateSection(ctx context.Context, arg CreateSectionParams) (Section, error) {
	row := q.queryRow(ctx, q.createSectionStmt, createSection, arg.ChapterID, arg.Title, arg.Number)
	var i Section
	err := row.Scan(
		&i.ID,
		&i.ChapterID,
		&i.Title,
		&i.Number,
	)
	return i, err
}

const deleteSection = `-- name: DeleteSection :exec
DELETE FROM sections
WHERE id = $1
`

func (q *Queries) DeleteSection(ctx context.Context, id int32) error {
	_, err := q.exec(ctx, q.deleteSectionStmt, deleteSection, id)
	return err
}

const getSection = `-- name: GetSection :one
SELECT id, chapter_id, title, number FROM sections
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetSection(ctx context.Context, id int32) (Section, error) {
	row := q.queryRow(ctx, q.getSectionStmt, getSection, id)
	var i Section
	err := row.Scan(
		&i.ID,
		&i.ChapterID,
		&i.Title,
		&i.Number,
	)
	return i, err
}

const getSectionsByChapter = `-- name: GetSectionsByChapter :many
SELECT id, chapter_id, title, number FROM sections
WHERE chapter_id = $1
`

func (q *Queries) GetSectionsByChapter(ctx context.Context, chapterID sql.NullInt32) ([]Section, error) {
	rows, err := q.query(ctx, q.getSectionsByChapterStmt, getSectionsByChapter, chapterID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Section{}
	for rows.Next() {
		var i Section
		if err := rows.Scan(
			&i.ID,
			&i.ChapterID,
			&i.Title,
			&i.Number,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSection = `-- name: UpdateSection :one
UPDATE sections
SET
  chapter_id = $2,
  title = $3,
  number = $4
WHERE id = $1
RETURNING id, chapter_id, title, number
`

type UpdateSectionParams struct {
	ID        int32          `json:"id"`
	ChapterID sql.NullInt32  `json:"chapter_id"`
	Title     sql.NullString `json:"title"`
	Number    sql.NullInt32  `json:"number"`
}

func (q *Queries) UpdateSection(ctx context.Context, arg UpdateSectionParams) (Section, error) {
	row := q.queryRow(ctx, q.updateSectionStmt, updateSection,
		arg.ID,
		arg.ChapterID,
		arg.Title,
		arg.Number,
	)
	var i Section
	err := row.Scan(
		&i.ID,
		&i.ChapterID,
		&i.Title,
		&i.Number,
	)
	return i, err
}
