// Code generated by sqlc. DO NOT EDIT.
// source: chapter.sql

package db

import (
	"context"
	"database/sql"
)

const createChapter = `-- name: CreateChapter :one
INSERT INTO chapters (
    book_id,
    title,
    number
) VALUES (
  $1, $2, $3
) RETURNING id, book_id, title, number
`

type CreateChapterParams struct {
	BookID sql.NullInt32 `json:"book_id"`
	Title  string        `json:"title"`
	Number sql.NullInt32 `json:"number"`
}

func (q *Queries) CreateChapter(ctx context.Context, arg CreateChapterParams) (Chapter, error) {
	row := q.db.QueryRowContext(ctx, createChapter, arg.BookID, arg.Title, arg.Number)
	var i Chapter
	err := row.Scan(
		&i.ID,
		&i.BookID,
		&i.Title,
		&i.Number,
	)
	return i, err
}

const deleteChapter = `-- name: DeleteChapter :exec
DELETE FROM chapters
WHERE id = $1
`

func (q *Queries) DeleteChapter(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteChapter, id)
	return err
}

const getChapter = `-- name: GetChapter :one
SELECT id, book_id, title, number FROM chapters
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetChapter(ctx context.Context, id int32) (Chapter, error) {
	row := q.db.QueryRowContext(ctx, getChapter, id)
	var i Chapter
	err := row.Scan(
		&i.ID,
		&i.BookID,
		&i.Title,
		&i.Number,
	)
	return i, err
}

const getChapters = `-- name: GetChapters :many
SELECT id, book_id, title, number FROM chapters
`

func (q *Queries) GetChapters(ctx context.Context) ([]Chapter, error) {
	rows, err := q.db.QueryContext(ctx, getChapters)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Chapter{}
	for rows.Next() {
		var i Chapter
		if err := rows.Scan(
			&i.ID,
			&i.BookID,
			&i.Title,
			&i.Number,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getChaptersByBook = `-- name: GetChaptersByBook :many
SELECT id, book_id, title, number FROM chapters
WHERE book_id = $1
`

func (q *Queries) GetChaptersByBook(ctx context.Context, bookID sql.NullInt32) ([]Chapter, error) {
	rows, err := q.db.QueryContext(ctx, getChaptersByBook, bookID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Chapter{}
	for rows.Next() {
		var i Chapter
		if err := rows.Scan(
			&i.ID,
			&i.BookID,
			&i.Title,
			&i.Number,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateChapter = `-- name: UpdateChapter :one
UPDATE chapters
SET
  book_id = $2,
  title = $3,
  number = $4
WHERE id = $1
RETURNING id, book_id, title, number
`

type UpdateChapterParams struct {
	ID     int32         `json:"id"`
	BookID sql.NullInt32 `json:"book_id"`
	Title  string        `json:"title"`
	Number sql.NullInt32 `json:"number"`
}

func (q *Queries) UpdateChapter(ctx context.Context, arg UpdateChapterParams) (Chapter, error) {
	row := q.db.QueryRowContext(ctx, updateChapter,
		arg.ID,
		arg.BookID,
		arg.Title,
		arg.Number,
	)
	var i Chapter
	err := row.Scan(
		&i.ID,
		&i.BookID,
		&i.Title,
		&i.Number,
	)
	return i, err
}
