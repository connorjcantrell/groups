// Code generated by sqlc. DO NOT EDIT.
// source: group.sql

package db

import (
	"context"
	"database/sql"
)

const createGroup = `-- name: CreateGroup :one
INSERT INTO groups (
  organizer,
  name,
  description
) VALUES (
  $1, $2, $3
) RETURNING id, organizer, name, description, created_at
`

type CreateGroupParams struct {
	Organizer   int32          `json:"organizer"`
	Name        string         `json:"name"`
	Description sql.NullString `json:"description"`
}

func (q *Queries) CreateGroup(ctx context.Context, arg CreateGroupParams) (Group, error) {
	row := q.db.QueryRowContext(ctx, createGroup, arg.Organizer, arg.Name, arg.Description)
	var i Group
	err := row.Scan(
		&i.ID,
		&i.Organizer,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
	)
	return i, err
}

const deleteGroup = `-- name: DeleteGroup :exec
DELETE FROM groups
WHERE id = $1
`

func (q *Queries) DeleteGroup(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteGroup, id)
	return err
}

const getGroup = `-- name: GetGroup :one
SELECT id, organizer, name, description, created_at FROM groups
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetGroup(ctx context.Context, id int32) (Group, error) {
	row := q.db.QueryRowContext(ctx, getGroup, id)
	var i Group
	err := row.Scan(
		&i.ID,
		&i.Organizer,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
	)
	return i, err
}

const getGroups = `-- name: GetGroups :many
SELECT id, organizer, name, description, created_at FROM groups
`

func (q *Queries) GetGroups(ctx context.Context) ([]Group, error) {
	rows, err := q.db.QueryContext(ctx, getGroups)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Group{}
	for rows.Next() {
		var i Group
		if err := rows.Scan(
			&i.ID,
			&i.Organizer,
			&i.Name,
			&i.Description,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateGroup = `-- name: UpdateGroup :one
UPDATE groups
SET
  organizer = $2,
  name = $3,
  description = $4
WHERE id = $1
RETURNING id, organizer, name, description, created_at
`

type UpdateGroupParams struct {
	ID          int32          `json:"id"`
	Organizer   int32          `json:"organizer"`
	Name        string         `json:"name"`
	Description sql.NullString `json:"description"`
}

func (q *Queries) UpdateGroup(ctx context.Context, arg UpdateGroupParams) (Group, error) {
	row := q.db.QueryRowContext(ctx, updateGroup,
		arg.ID,
		arg.Organizer,
		arg.Name,
		arg.Description,
	)
	var i Group
	err := row.Scan(
		&i.ID,
		&i.Organizer,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
	)
	return i, err
}
