// Code generated by sqlc. DO NOT EDIT.
// source: event.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const createEvent = `-- name: CreateEvent :one
INSERT INTO events (
  group_id,
  book_id,
  chapter_id,
  video_link,
  start_time,
  duration,
  description
) VALUES (
  $1, $2, $3, $4, $5, $6, $7
) RETURNING id, group_id, book_id, chapter_id, video_link, start_time, duration, description, canceled, created_at
`

type CreateEventParams struct {
	GroupID     sql.NullInt32   `json:"group_id"`
	BookID      sql.NullInt32   `json:"book_id"`
	ChapterID   sql.NullInt32   `json:"chapter_id"`
	VideoLink   string          `json:"video_link"`
	StartTime   time.Time       `json:"start_time"`
	Duration    sql.NullFloat64 `json:"duration"`
	Description sql.NullString  `json:"description"`
}

func (q *Queries) CreateEvent(ctx context.Context, arg CreateEventParams) (Event, error) {
	row := q.queryRow(ctx, q.createEventStmt, createEvent,
		arg.GroupID,
		arg.BookID,
		arg.ChapterID,
		arg.VideoLink,
		arg.StartTime,
		arg.Duration,
		arg.Description,
	)
	var i Event
	err := row.Scan(
		&i.ID,
		&i.GroupID,
		&i.BookID,
		&i.ChapterID,
		&i.VideoLink,
		&i.StartTime,
		&i.Duration,
		&i.Description,
		&i.Canceled,
		&i.CreatedAt,
	)
	return i, err
}

const deleteEvent = `-- name: DeleteEvent :exec
DELETE FROM events
WHERE id = $1
`

func (q *Queries) DeleteEvent(ctx context.Context, id int32) error {
	_, err := q.exec(ctx, q.deleteEventStmt, deleteEvent, id)
	return err
}

const getEvent = `-- name: GetEvent :one
SELECT id, group_id, book_id, chapter_id, video_link, start_time, duration, description, canceled, created_at FROM events
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetEvent(ctx context.Context, id int32) (Event, error) {
	row := q.queryRow(ctx, q.getEventStmt, getEvent, id)
	var i Event
	err := row.Scan(
		&i.ID,
		&i.GroupID,
		&i.BookID,
		&i.ChapterID,
		&i.VideoLink,
		&i.StartTime,
		&i.Duration,
		&i.Description,
		&i.Canceled,
		&i.CreatedAt,
	)
	return i, err
}

const getEvents = `-- name: GetEvents :many
SELECT id, group_id, book_id, chapter_id, video_link, start_time, duration, description, canceled, created_at FROM events
`

func (q *Queries) GetEvents(ctx context.Context) ([]Event, error) {
	rows, err := q.query(ctx, q.getEventsStmt, getEvents)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Event{}
	for rows.Next() {
		var i Event
		if err := rows.Scan(
			&i.ID,
			&i.GroupID,
			&i.BookID,
			&i.ChapterID,
			&i.VideoLink,
			&i.StartTime,
			&i.Duration,
			&i.Description,
			&i.Canceled,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateEvent = `-- name: UpdateEvent :one
UPDATE events
SET 
  group_id = $2,
  book_id = $3,
  chapter_id = $4,
  video_link = $5,
  start_time = $6,
  duration = $7,
  description = $8
WHERE id = $1
RETURNING id, group_id, book_id, chapter_id, video_link, start_time, duration, description, canceled, created_at
`

type UpdateEventParams struct {
	ID          int32           `json:"id"`
	GroupID     sql.NullInt32   `json:"group_id"`
	BookID      sql.NullInt32   `json:"book_id"`
	ChapterID   sql.NullInt32   `json:"chapter_id"`
	VideoLink   string          `json:"video_link"`
	StartTime   time.Time       `json:"start_time"`
	Duration    sql.NullFloat64 `json:"duration"`
	Description sql.NullString  `json:"description"`
}

func (q *Queries) UpdateEvent(ctx context.Context, arg UpdateEventParams) (Event, error) {
	row := q.queryRow(ctx, q.updateEventStmt, updateEvent,
		arg.ID,
		arg.GroupID,
		arg.BookID,
		arg.ChapterID,
		arg.VideoLink,
		arg.StartTime,
		arg.Duration,
		arg.Description,
	)
	var i Event
	err := row.Scan(
		&i.ID,
		&i.GroupID,
		&i.BookID,
		&i.ChapterID,
		&i.VideoLink,
		&i.StartTime,
		&i.Duration,
		&i.Description,
		&i.Canceled,
		&i.CreatedAt,
	)
	return i, err
}
